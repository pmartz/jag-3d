/**

\page JagSpecification JAG Specification

\section Contents

- \ref SpecIntroduction
- \ref SpecComponenets
- \ref SpecModules
  - \ref SpecModulePointer
  - \ref SpecModuleLogging
  - \ref SpecModuleMath
  - \ref SpecModuleOpenGL
  - \ref SpecModuleBase
  - \ref SpecModuleDisk
    - Plugins
  - \ref SpecModuleDraw
  - \ref SpecModuleSG


\section SpecIntroduction Introduction

JAG specifies the behavior of an OpenGL-based rendering toolkit. JAG does not specify
function or class names or a language binding. There could be multiple JAG-compliant
toolkit implementations, of which Jag3D is one. It is not a requirement that code written
for one JAG-compliant toolkit will port directly, or even easily, to another JAG-compliant
toolkit.

"OpenGL-based rendering toolkit" means a collection of software, typically implemented as
a library, useful for developingt OpenGL applications. JAG is specifically designed to
support applications that use OpenGL v4.0 contexts created with the forward compatible and
core profile flags ("GL4"). For additional information, download a copy of the
<a href="http://www.opengl.org/registry/#oldspecs">OpenGL v4.0 specification</a>. Note
that future versions of JAG will likely require a more recent version of OpenGL.

Note that JAG-based client code isn't required to use a GL4 context. However, because a
JAG implementation provides utilities to access GL4 functionality, non-GL4 client code
should take precautions to avoid JAG functionality that depends on GL4. As an example,
client code using an OpenGL 3.2 context should not use any of the indirect drawing
commands (DrawElementsIndirect), or double-precision uniform variables.

A JAG implementation isn't required to provide GL4 functionality via OpenGL's
extension mechanism for client code that uses non-GL4 contexts.

As an OpenGL-based rendering toolkit, JAG must not prevent or hinder the use of any
OpenGL rendering algorithm or technique.


\section SpecComponenets Specification Components

The specification is composed of two parts: this \a Introduction document,
and the <a href="annotated.html">Doxygen-generated class reference</a>
from the Jag3D source code. Because Jag3D is a C++ implementation of JAG,
this reference material is inherently C++-oriented. This bias should not
be interpreted as a specification requirement.

The reference material for each class and member function contains the following
specifications:
\li Log handle.
\li Thread-safety requirements.
\li OpenGL footprint requirements (if applicable).
\li Dependency requirements.
\li Variable default values, if applicable.
\li Intended usage.
\li Known specification violations.


\anchor ThreadDefinitions
\subsection SpecThread Thread-safety Requirements
\li Thread Safe: The code employes explicit locking.
\li Context Safe: The code is thread safe when executed by a
context-specific thread. Multiple context threads must have
thread-specific instances of any C++ objects marked as "Context Safe". 
\li Read-Only: The code is thread safe because it does not modify
any shared memory.
\li Unsafe: The code is not thread safe.


\subsection SpecOpenGL OpenGL Footprint Requirements

for functions that issue OpenGL commands, this spec documents
what commands are issued and under which circumstances.


\subsection SpecDependency Dependency Requirements

Jag3D reference documentation for specific classes and functions
enumerate their dependencies. (For example, jagDraw::Drawable depends on
jagDraw::DrawCommand.)

The following table describes JAG dependencies at a higher level. Each
row and column represents a JAG module. A dependency from the row module
on the subordinate column module is indicated with &apos;X&apos;.

<table border=1 cellpadding=4>
  <tr align=CENTER bgcolor=#d0d0d0>
    <th></th>            <th>Scene Graph</th>  <th>Draw</th>  <th>Disk</th>  <th>OpenGL</th>  <th>Math</th>  <th>Logging</th>  <th>Smart Pointers</th>
  </tr>
  <tr align=CENTER>
    <td>Scene Graph</td> <td></td>             <td>X</td>     <td></td>      <td></td>        <td>X</td>     <td>X</td>        <td>X</td>
  </tr>
  <tr align=CENTER>
    <td>Draw</td>        <td></td>             <td></td>      <td></td>      <td>X</td>       <td>X</td>     <td>X</td>        <td>X</td>
  </tr>
  <tr align=CENTER>
    <td>Disk</td>        <td></td>             <td></td>      <td></td>      <td></td>        <td></td>      <td>X</td>        <td>X</td>
  </tr>
  <tr align=CENTER>
    <td>Plugins</td>     <td>X</td>            <td>X</td>     <td>X</td>     <td></td>        <td>X</td>     <td>X</td>        <td>X</td>
  </tr>
</table>

The modules themselves are described in the following section.


\section SpecModules Module Requirements

\subsection SpecModulePointer Smart Pointers

The JAG implementation must support boost- or TR1-compatible pointers for
reference counted memory.

\subsection SpecModuleLogging Logging

The JAG implementation must support a logging mechanism with the following features:
\li Direct output to the console or a log file.
\li Set logging verbosity per class and per logical grouping of like classes.

\subsection SpecModuleMath Math

The Jag implementation must support a math library containing data types
compatible with OpenGL. The math library must support the following features:
\li matrix-matrix concatenation
\li matrix inversion
\li matrix-vector multiplication
\li common matrix construction utilities (frustum, perspective, rotate, etc)
\li vector cross and dot product
\li vector normalization, scale, modulation, addition, and subtraction
\li arrays of matrices and vectors

\subsection SpecModuleOpenGL OpenGL

OpenGL is not a JAG module. However, a JAG-compliant implementation must
provide a shim layer above OpenGL. THis shim layer must provide the
following functionality:
\li OpenGL command and parameter recording to file
\li Command trace messages to console
\li Per-command error checking
\li State dump

All functionality must be available on a per-context basis.
All functionality must be individually enabled or disabled. The implementation
must provide the ability to disable the entire shim layer such that it has
zero impact on performance (typically with a compile-time option).

\subsection SpecModuleBase Base

The \a Base module is not a JAG requirement. Jag3D has a jagBase library,
and it contains support for smart pointers, logging, and math.

\subsection SpecModuleDisk Disk
<h4>Plugins</h4>
\subsection SpecModuleDraw Draw
\subsection SpecModuleSG Scene Graph


*/
