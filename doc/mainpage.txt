/**

\mainpage Jag3D: A 3D Rendering Toolkit

\ref JagBuild "Building Jag3D"<br>
\ref JagRun "Running Jag3D"<br>
\ref JagCommits "Mercurial (Hg) Guidelines for Jag3D Commits"

<hr>


\section JagOverview Overview

\a JAG is a \ref JagSpecification "specification" for an OpenGL-based rendering toolkit.
\a Jag3D is a sample implementation of the JAG specifiction.
You are reading Doxygen documentation generated from the Jag3D source. This documentation
also comprises the JAG specification itself.

Jag3D consists of the following components:
\li jagBase: Logging, pointer, version, math, and other shared components.
\li jagDisk: File loading interface.
\li jagDraw: OpenGL-based rendering module, supporting multiple rendering contexts
and retained mode rendering.
\li jagSG: Scene graph support.
\li Plugins: Support for a variety of data file formats.
\li Examples: Examples of typical usage.
\li Unit tests: Regression test suite.


\subsection jagBase

\li \link jagBase::Transform Utility for model, view, and projection matrices \endlink
\li \ref jagVersion "Version Utilities"
\li \ref jagBaseLogging "Message Logging Utilities"


\subsection jagDisk

This module provides a plugin infrastructure to support writing and loading
data to and from various formats. The architecture is inspired by OpenSceneGraph's
analogous system, but uses Poco for platform-independent plugin loading.

\li \ref PluginSupport "Plugin Interface and Utilities"


\subsection jagDraw

This module contains host-side data store and multi-context support
for many OpenGL commands.

This is the only module that executes OpenGL commands. All jagDraw
OpenGL code is compatible with an OpenGL v4.0 core profile / forward
compatible (GL4cpfc) context. (Note that Jag3D currently supports OSX 10.7,
which is OpenGL 3.2 core profile, but this support is likely to be dropped as
soon as OSX moves forward with a more current OpenGL version.)

Direct OpenGL support:
\li \ref jagVersion "OpenGL Version Queries"
\li \ref OpenGLAbstraction "OpenGL Abstraction Support"
\li \ref jagDrawError "OpenGL Errors"
\li \link jagDraw::VertexAttrib Generic Vertex Attributes \endlink
\li \link jagDraw::VertexArrayObject Vertex Array Objects \endlink
\li \link jagDraw::DrawCommand Drawing commands \endlink
\li \link jagDraw::BufferObject Buffer Objects \endlink
\li \link jagDraw::Shader Shader Objects \endlink
\li \link jagDraw::Program Program Objects \endlink
\li \link jagDraw::Uniform Uniform Variables \endlink
\li \link jagDraw::UniformBlock Uniform Blocks \endlink
\li \link jagDraw::Framebuffer Framebuffer Objects \endlink
\li \link jagDraw::Texture Texture Objects \endlink

Higher level constructs:
\li \link jagDraw::Drawable Drawable Objects \endlink
\li \link jagDraw::CommandMap Support for storing and sorting collections of commands \endlink
\li \link jagDraw::DrawInfo Render-time management \endlink
\li \link jagDraw::Node Association of DrawablePrep objects and Drawables \endlink


\subsection jagSG

This module provides scene graph functionality layered on top of jagDraw and jagBase.
Scene graphs can be created programmatically, or by using a jagDisk plugin
to create a scene graph from a loaded model file.

\li \link jagSG::Node Scene graph data structure element \endlink
\li \link jagSG::VisitorBase Base class to support Visitor design pattern. \endlink
\li \link jagSG::Visitor Visitor with child Node traversal control \endlink
\li \link jagSG::ExecuteVisitor Immediate mode traverse-and-render \endlink
\li jagSG::CullVisitor - Not yet implemented; under development


\subsection ProjectRoadmap Upcoming Work and Project Notes

For inclusion in v0.00.04:
\li OSG-based model loading plugin.

For inclusion in v0.00.06:
\li Need to implement CullVisitor.
\li "State sorting" (sorting Drawables based on the commands that configure GL for
rendering) is implemented but currently untested.

For inclusion in v0.00.08:
\li Attachable user data.
\li debug text export plugin.

Beyond v0.00.08:
\li Open Asset Import model loading plugin.
\li Vertex array objects and uniform blocks need to track changes. Uniform blocks,
in particular, always copy their values into the block.
\li See jagDraw::Uniform documentation for potential optimizations and use cases
that Jag3D should support.
\li Design for cache misses: avoid-cache-misses.pdf.
\li Add software mipmap generation. Hardware support for this is unavailable in GL4cpfc.


\section JagBuild Building Jag3D

\subsection BuildSource Get the Source Code

The source code is in a Google Code Mercurial repository:
\code
hg clone http://SkewMatrix@code.google.com/p/jag-3d/ 
\endcode

\subsection BuildDependencies Dependencies

Your development system must support building OpenGL 4.0 (3.2 on OSX) applications.
This means Jag3D requires GL/glcorearb.h somewhere on your
development system.

For OpenGL 3/4 on Windows,
Jag3D uses the gl3w toolkit, so this means you'll need to download glcorearb.h from the
<a href=http://www.opengl.org/registry/>OpenGL Extension Registry</a>. Unfortunately, gl3w
has adopted the current paradagm:
\code
#include <GL/glcorearb.h>
\endcode
but OSG still uses the old paradigm:
\code
#include <GL3/gl3.h>
\endcode
In order to use the optional OSG dependency, you'll need to create
a stub gl3.h header like this:
\code
#ifdef GL3_PROTOTYPES
#  define GLCOREARB_PROTOTYPES 1
#endif

#include <GL/glcorearb.h>
\endcode
Name this file gl3.h and place it in a directory named GL3 somewhere on your development system,
preferably as a sibling to the GL directory that contains glcorearb.h (so that they can both
use the same include path. Then \ref BuildCMake "point CMake at the directory containing both GL and GL3".

Jag3D has the following required dependencies:
\li <a href=http://pocoproject.org/download/index.html>Poco</a> developer release v1.5.1 or newer. Get the "Basic Edition".
\li <a href=http://www.boost.org/users/download/>Boost</a> v1.48_0 or newer. Some libraries are required.
\li <a href=http://sourceforge.net/projects/ggt/>Generic Graphics Toolkit (GMTL)</a> svn trunk r1286 or newer.

Jag3D has the following optional dependencies:
\li <a href=http://www.openscenegraph.org/projects/osg>OpenSceneGraph (OSG)</a> v3.0.1 or newer (v3.1.3 recommended).
Must be built for GL3 compatibility.
\li <a href=http://www.stack.nl/~dimitri/doxygen/download.html >Doxygen</a>.
\li Microsoft DirectX SDK (for gamepad support).

Furthermore, in order to run any of the examples, you'll need one or more
windowing toolkits. Jag3D's build infrastructure currently supports the
following windowing toolkits:
\li <a href=http://freeglut.sourceforge.net/>Freeglut</a> v2.8.0 or newer.
\li <a href=http://code.google.com/p/vrjuggler/source/checkout>VRJuggler</a> git main trunk.
\li <a href=http://qt-project.org/downloads>Qt</a> v5.0.0 or newer.

Poco and Boost must be built as shared libraries / DLLs in order for Jag3D to work correctly.

Instructions for building OSG for GL3 compatibility can be found in the
OSG source tree: examples/osgsimplegl3/osgsimplegl3.cpp. Read the comment block at
the bottom of the source file.

\subsection BuildCMake Configuring CMake to Create Jag3D Project Files

Jag3D requires CMake v2.8.5 or newer.

The following CMake variables will probably need to be set in order to find the dependencies:
\li GL3_ROOT Set this to the parent of the GL3 directory containing the gl3.h header.
\li BOOST_ROOT
\li GMTL_INCLUDE_DIR
\li Poco_ROOT
\li Freeglut_ROOT_PATH
\li FREEGLUT_STATIC Create as a BOOL and set to true, if you are using static freeglut libraries.
\li DIRECTINPUT_ROOT_DIR

For finding VRJuggler, set VJ_BASE_DIR in your environment. VRJuggler requires
CppDOM, so you will also need to set CPPDOM_ROOT_DIR as a CMake variable.

Jag3D uses a helper macro to aid in finding OSG. Use the OSGInstallType pulldown menu
in cmake-gui to select the OSG installation type. Click Configure, then supply any
additional information required.

Jag3D uses CMake's built-in scripts for finding Boost and Qt. See those
scripts for help with finding those dependencies.

The variables JAG3D_USE_FREEGLUT, JAG3D_USE_VRJ, and JAG3D_USE_QT control how the tests are built.
These variables may be set to ON or OFF in any combination. If a variable is ON, the corresponding
windowing toolkit must be found in CMake. Examples and tests for a particular windowing toolkit
will be built only if the corresponding CMake variable is ON, and the windowing toolkit is
found during CMake configuration.

The variable JAG3D_USE_GL3W must be ON for Windows builds and OFF for all other platforms.

\subsection BuildBuilding Build Jag3D

After CMake is completely configured, build the entire project. For Windows, enter
Visual Studio and do a batch build. For Unix/Linix/OSX makefiles, use the \c make command.


\section JagRun Running Jag3D

After a successful build, you should be able to perform a simple test by executing the
\c drawable test. The name of the executable will have the windowing toolkit appended. For
example, \c drawable-freeglut, \c drawable-vrj, or \c drawable-qt.

If you have checked the CMake variable JAG3D_BUILD_UNITTESTS, you can also run the test
suite. If using Visual Studio in Windows, right-click RUN_TESTS and select Build. If
using Makefiles, issue this command:
\code
make tests
\endcode

Other examples and tests require you to set environment variables:
\li JAG3D_PLUGIN_PATH should be set to the directory containing Jag3D's plugin libraries
(their library names have a\c jagpi- prefix). The same directory should also contain the
corresponding \c .jagpi files.
\li JAG3D_DATA_PATH should be set to a list of directories containing data files, such
as the \c data directory in the Jag3D source tree.


\section JagCommits Mercurial (Hg) Guidelines for Jag3D Commits

Before making modifications to JAG, please review
\ref SpecSubmissions "the submissions requirements".

To make changes to the Jag3D project, you should first clone
<a href="https://code.google.com/p/jag-3d/source/checkout">
the Google Code repo</a> to your local development system.

Please submit all changes as bundled changesets that have already been
merged with the current Google Code repo tip. Bundled changesets preserve
your local revision history and automatically credit you as the author
of the modifications.

Here are general rules you should follow for Jag3D development:
-# Make changes and commit to your local repo. You might need
to do this multiple times.
-# Before you submit your changes, pull the latest from the
Google Code repo and merge with your local repo. (For extended
development, you might want to do this frequently to stay current
and avoid the pain of a single massive merge.)
-# Don't forget to commit your merge to your local repo.
-# Create a changeset that starts at your first commit and ends
at the tip of your repo. Using hg command line:
\code
hg bundle -r <first-commit-rev#>
\endcode
Using TortoiseHg, right click on the first commit, then select
Export -> Bundle Rev and Descendants... from the context menu.
-# <a href="https://code.google.com/p/jag-3d/issues/list">
Open an issue</a> and attach the bundled changeset, or email it
to someone with commit access. After approval, your changeset
will be unbundled into the Google Code repo.

It doesn't matter if your bundle contains revisions that are already
in the Google Code repo. Mercurial is smart enough to deal with
this correctly.

*/
