/**

\mainpage Jag3D: A 3D Rendering Toolkit

\ref JagBuild "Building Jag3D"<br>
\ref JagRun "Running Jag3D"

<hr>


\section JagOverview Overview

\subsection jagBase

\li \ref jagBaseVersion "Version Utilities"
\li \ref jagBaseLogging "Message Logging Utilities"

\subsection jagDisk

Documentation TBD.

\subsection jagDraw

This module contains host-side data store and multi-context support
for many OpenGL commands.

This is the only module that executes OpenGL commands. All jagDraw
OpenGL code is compatible with an OpenGL v4.0 core profile / forward
compatible (GL4cpfc) context. (Note that Jag3D currently supports OSX 10.7,
which is OpenGL 3.2 core profile, but this support is likely to be dropped as
soon as OSX moves forward with a more current OpenGL version.)

Note that hardware mipmap generation is unavailable in GL4cpfc. Jag3D will need
host-side image filtering code to replace this functionality.

Direct OpenGL support:
\li \ref OpenGLAbstraction "OpenGL Abstraction Support"
\li \ref jagDrawError "OpenGL Errors"
\li \link jagDraw::VertexAttrib Generic Vertex Attributes \endlink
\li \link jagDraw::VertexArrayObject Vertex Array Objects \endlink
\li \link jagDraw::DrawCommand Drawing commands \endlink
\li \link jagDraw::BufferObject Buffer Objects \endlink
\li \link jagDraw::Shader Shader Objects \endlink
\li \link jagDraw::Program Program Objects \endlink
\li \link jagDraw::Uniform Uniform Variables \endlink

Higher level constructs:
\li \link jagDraw::Drawable Drawable Objects \endlink

\subsection jagSG

jagSG, the scene graph module, does not currently exist.

\subsection ProjectRoadmap Upcoming Work and Project Notes

\li Vertex array objects and uniform blocks need to track changes. Uniform blocks,
in particular, always copy their values into the block.
\li See jagDraw::Uniform documentation for potential optimizations and use cases
that Jag3D should support.
\li "State sorting" (sorting Drawables based on the commands that configure GL for
rendering) needs to be implemented.
\li Need to start developing jagSG (scene graph module) and visitor pattern.
\li Need to develop a model loading plugin, initially OSG-based, but soon add one that
uses Open Asset Import Library.


\section JagBuild Building Jag3D

\subsection BuildSource Get the Source Code

The source code is in a Google Code Mercurial repository:
\code
hg clone http://SkewMatrix@code.google.com/p/jag-3d/ 
\endcode

\subsection BuildDependencies Dependencies

Your development system must support building OpenGL 4.0 (3.2 on OSX) applications.
On non-Windows platforms, this means Jag3D requires GL3/gl3.h somewhere on your
development system.

For OpenGL 3/4 on Windows,
Jag3D uses the gl3w toolkit, so this means you'll need to download glcorearb.h from the
<a href=http://www.opengl.org/registry/>OpenGL Extension Registry</a>. Unfortunately, OSG has
not moved to glcorearb.h yet, so you'll need to place
the following code in a file called gl3.h, as a wrapper:
\code
#ifdef GL3_PROTOTYPES
#  define GLCOREARB_PROTOTYPES 1
#endif

#include <GL3/glcorearb.h>
\endcode
Place both gl3.h and glcorearb.h in a directory named GL3 somewhere on your development system,
and \ref BuildCMake "point CMake at that location".

Jag3D has the following required dependencies:
\li <a href=http://pocoproject.org/download/index.html>Poco</a> v1.4.3p1 or newer. Get the "Basic Edition".
\li <a href=http://www.boost.org/users/download/>Boost</a> v1.48_0 or newer. Some libraries are required.
\li <a href=http://sourceforge.net/projects/ggt/>Generic Graphics Toolkit (GMTL)</a> svn trunk r1280 or newer.

Jag3D has the following optional dependencies:
\li <a href=http://www.openscenegraph.org/projects/osg>OpenSceneGraph (OSG)</a> v3.0.1 or newer (v3.1.3 recommended).
Must be built for GL3 compatibility.

Furthermore, in order to run any of the examples, you'll need one or more
windowing toolkits. Jag3D's build infrastructure currently supports the
following windowing toolkits:
\li <a href=http://freeglut.sourceforge.net/>Freeglut</a> v2.8.0 or newer.
\li <a href=http://code.google.com/p/vrjuggler/downloads/list>VRJuggler</a> The GL3 branch is required.
\li <a href=http://qt-project.org/downloads>Qt</a> v4.8.0 or newer (v4.8.3 recommended). You need only the libraries, not the SDK.

Poco and Boost must be built as shared libraries / DLLs in order for Jag3D to work correctly.

Instructions for building OSG for GL3 compatibility can be found in the
OSG source tree: examples/osgsimplegl3/osgsimplegl3.cpp. Read the comment block at
the bottom of the source file.

\subsection BuildCMake Configuring CMake to Create Jag3D Project Files

Jag3D requires CMake v2.8.5 or newer.

The following CMake variables will probably need to be set in order to find the dependencies:
\li Poco_ROOT
\li GMTL_ROOT_DIR
\li Freeglut_ROOT_PATH
\li GL3_ROOT Set this to the parent of the GL3 directory containing the gl3.h header.

For finding VRJuggler, set VJ_BASE_DIR in your environment. VRJuggler requires
CppDOM, so you will also need to set CPPDOM_ROOT_DIR as a CMake variable.

Jag3D uses CMake's built-in scripts for finding Boost, OSG, and Qt. See those
scripts for help with finding those dependencies.

The variables JAG3D_USE_FREEGLUT, JAG3D_USE_VRJ, and JAG3D_USE_QT control how the tests are built.
These variables may be set to ON or OFF in any combination. If a variable is ON, the corresponding
windowing toolkit must be found in CMake. Examples and tests for a particular windowing toolkit
will be built only if the corresponding CMake variable is ON, and the windowing toolkit is
found during CMake configuration.

The variable JAG3D_USE_GL3W must be ON for Windows builds and OFF for all other platforms.

\subsection BuildBuilding Building Jag3D from Source

After CMake is completely configured, build the entire project. For Windows, enter
Visual Studio and do a batch build. For Unix/Linix/OSX makefiles, use the \c make command.


\section JagRun Running Jag3D

After a successful build, you should be able to perform a simple test by executing the
\c drawable test. The name of the executable will have the windowing toolkit appended. For
example, \c drawable-freeglut, \c drawable-vrj, or \c drawable-qt.

Other examples and tests require you to set environment variables:
\li JAG3D_PLUGIN_PATH should be set to the directory containing Jag3D's plugin libraries
(their library names have a\c jagpi- prefix). The same directory should also contain the
corresponding \c .jagpi files.
\li JAG3D_DATA_PATH should be set to a list of directories containing data files, such
as the \c data directory in the Jag3D source tree.

*/
